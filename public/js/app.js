"use strict";$(function(){function e(){b=[],w=[],k=3,T=k,l(),B=0,D=0,M="Player 1"}function n(e){if((x||P)&&g[e.key]){var n=g[e.key],a=e.key;s(n),b.push(parseInt(e.key)),O.removeClass("hiddener"),O.html(a),setTimeout(t,500),d()}}function a(e){O.removeClass("hiddener"),O.html(e),setTimeout(t,500)}function t(){O.addClass("hiddener")}function i(){for(var e=0;e<k;e++){var n=Math.floor(8*Math.random());w.push(g[I[n]])}o()}function o(){setTimeout(function(){z<k?(s(w[z]),p.addClass("hidden"),p.html(M),console.log(w[z].audio),o(),z++):(z=0,r.keypress(n))},1e3)}function s(e){h.src="src/assets/audio/"+e.audio+".wav",h.play(),a(e.audio);var n=e.element.clone();n.appendTo("main").removeClass("hidden").addClass(e.animationIn).removeClass(e.animationOut),setTimeout(function(){n.removeClass(e.animationIn).addClass(e.animationOut)},1200),setTimeout(function(){n.remove()},1900)}function d(){var e=b.length===w.length&&b.every(function(e,n){return e===w[n].audio});D+=1,D===k&&0===B&&!0!==P&&!0===x?(console.log(e),e?(k+=1,u(),m(),p.html("Pass! - next up "+M),p.removeClass("hidden"),r.unbind("keypress",n),setTimeout(o,3e3)):e||P||(B+=1,m(),r.unbind("keypress",n),setTimeout(o,3e3),p.html("Fail! sudden death!! -next up "+M),p.removeClass("hidden"))):D!==k||0===B||P||(!0===e?(p.html(M+" Wins!"),p.removeClass("hidden"),C.removeClass("hidden")):e||P||(p.html(M+" Fails!! ---- TIE!"),p.removeClass("hidden"),C.removeClass("hidden")))}function u(){var e=Math.floor(8*Math.random());w.push(g[I[e]])}function m(){b=[],D=0,T+=1,l()}function l(){M=T%2==0?"Player 2":"Player 1"}console.log("JS yo");var r=$(document),h=$("audio")[0],c=$(".welcome"),f=$("#game"),v=$("#playground"),p=$(".feedback"),C=($(".reset"),$(".endgame")),y=$(".switch"),O=$(".numberDisplay"),I=[1,2,3,4,5,6,7,8],g={1:{element:$(".first"),animationIn:"fadeInDownBig",animationOut:"zoomOut",audio:1},2:{element:$(".second"),animationIn:"zoomIn",animationOut:"fadeOut",audio:2},3:{element:$(".third"),animationIn:"flash",animationOut:"fadeOut",audio:3},4:{element:$(".fourth"),animationIn:"rotateIn",animationOut:"rotateOut",audio:4},5:{element:$(".fifth"),animationIn:"flashtwo",animationOut:"fadeOut",audio:5},6:{element:$(".sixth"),animationIn:"fadeInUpBig",animationOut:"lightSpeedOut",audio:6},7:{element:$(".seventh"),animationIn:"shake",animationOut:"fadeOut",audio:7},8:{element:$(".eighth"),animationIn:"slideInLeft",animationOut:"fadeOut",audio:8}},k=3,T=k,w=[],b=[],M="player 1",P=!1,x=!1;f.on("click",function(){c.hide(),x=!0,e(),p.removeClass("hidden"),p.html(M),setTimeout(i,3e3)}),v.on("click",function(){c.hide(),P=!0,C.removeClass("hidden"),e(),r.keypress(n)}),y.on("change",function(){console.log("checked"),O.toggleClass("hidden")});var z=0,B=0,D=0;C.on("click",function(){x=!1,P=!1,B=0,D=0,p.html(""),c.show(),C.addClass("hidden"),r.unbind("keypress",n)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
